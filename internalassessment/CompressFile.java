/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internalassessment;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipOutputStream;
import java.util.zip.ZipEntry;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.poi.openxml4j.exceptions.NotOfficeXmlFileException;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

/**
 *
 * @author jivitesh's PC
 */
public class CompressFile extends javax.swing.JFrame {
FileInputStream ChosenFile;
byte[]buffer;
FileInputStream FileToCompress;
FileOutputStream FileToWrite;
ZipOutputStream ZipOutput;

    /**
     * Creates new form CompressFile
     */
    public CompressFile() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("Would you like to compress your file Before encrypting it?");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Yes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("No");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        EncryptButtonClick  Encrypt= new EncryptButtonClick();
       Encrypt.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser SelectCompressionFile=new JFileChooser();
        //open dialog mwthod opens the dialog box of JFile chooser
        //the method below required a int parametr here we juts put null
        int Value=SelectCompressionFile.showOpenDialog(null);
        //the line belwo only shows the directories of the file as we are only working with directories
        
        //}
        Scanner Input= new Scanner(System.in);
        System.out.println("Please Enter the name of Your file and mention.docx type");
         String FileName=Input.nextLine();
        System.out.println("Please enter the name of the folder in your C: drive that you would like to save the file to");
        //String FolderName=Input.nextLine();
        System.out.println("Please Enter the name of the Zip folder you would like to create please mention .zip type");
        //String FileName=Input.nextLine();
        //String FolderName=Input.nextLine();
        //String ZipFolderName=Input.nextLine();
        byte[] buffer = new byte[8000];
    	try{
    	FileOutputStream FileToWrite = new FileOutputStream( "C:\\javatest\\ZipFolderName");
        ZipOutputStream ZipOutput = new ZipOutputStream(FileToWrite);
    	ZipEntry NewFile= new ZipEntry(FileName);
    	ZipOutput.putNextEntry(NewFile);
    	FileInputStream in = new FileInputStream(SelectCompressionFile.getSelectedFile());
    	int reading;
    	while ((reading = in.read(buffer)) > 0) {
    		ZipOutput.write(buffer, 0, reading);
    	}
    	in.close();
    	ZipOutput.closeEntry();
    	//remember close it
    	ZipOutput.close();
    	System.out.println("Your File has been compressed and folder has been created");
    	}catch(IOException ex){
    	   ex.printStackTrace();
    	}
	

        /*
        //the if statemnet below says if the user clicks the open file option in the filechooser the...
        try{
            if(Value==JFileChooser.APPROVE_OPTION && !SelectCompressionFile.getSelectedFile().getName().endsWith(".docx")){
                JOptionPane.showMessageDialog(null,"The File "+ SelectCompressionFile.getSelectedFile()+" is not a word file,Please choose another file.","Error",JOptionPane.ERROR_MESSAGE);
                
            }
            else{System.out.println("Corrects File Choosen ");
            }
        }catch(NotOfficeXmlFileException docu){}        // TODO add your handling code here:
        buffer=new byte[8000];
        try {
            FileToCompress= new FileInputStream (SelectCompressionFile.getSelectedFile());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        //ZipEntry NewFile= new ZipEntry(FileName);
        Scanner Input= new Scanner(System.in);
        System.out.println("Please Enter the name of Your file mention.docx type and Zip folder");
        String FileName=Input.nextLine();
        String FolderName=Input.nextLine();
        System.out.println("your File Has been created You can search it up now");
        ZipEntry NewFile= new ZipEntry(FileName);
        //XWPFDocument SavedFile= new XWPFDocument();
        try {
            FileToWrite= new FileOutputStream(FolderName);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        ZipOutput=new ZipOutputStream(FileToWrite);
        try {
            ZipOutput.putNextEntry(NewFile);
        } catch (IOException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        int read;
        try {
            while((read=FileToCompress.read(buffer))>0){
                ZipOutput.write(buffer,0,read);
            }   } catch (IOException ex) {
                Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        try {
            ZipOutput.closeEntry();
        } catch (IOException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            FileToWrite.close();
        } catch (IOException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            FileToCompress.close();
        } catch (IOException ex) {
            Logger.getLogger(CompressFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }
        
    
            public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CompressFile().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
            
   /*                     
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompressFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(() -> {
      //      new CompressFile().setVisible(true);
      //  });
   // }
/*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
} */

